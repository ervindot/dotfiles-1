"
"     .o88o.                               o8o                .
"     888 `"                               `"'              .o8
"    o888oo   .oooo.o  .ooooo.   .ooooo.  oooo   .ooooo.  .o888oo oooo    ooo
"     888    d88(  "8 d88' `88b d88' `"Y8 `888  d88' `88b   888    `88.  .8'
"     888    `"Y88b.  888   888 888        888  888ooo888   888     `88..8'
"     888    o.  )88b 888   888 888   .o8  888  888    .o   888 .    `888'
"    o888o   8""888P' `Y8bod8P' `Y8bod8P' o888o `Y8bod8P'   "888"      d8'
"                                                                 .o...P'
"                                                                 `XER0'

" Plugin: minpac (setup)
packadd minpac
call minpac#init()
call minpac#add('k-takata/minpac', {'type': 'opt'})
call minpac#add('airblade/vim-gitgutter')
call minpac#add('ap/vim-css-color')
" call minpac#add('autozimu/LanguageClient-neovim', { 'branch': 'next' })
call minpac#add('christoomey/vim-tmux-navigator')
" call minpac#add('dracula/vim', { 'as': 'dracula' })
call minpac#add('itchyny/lightline.vim')
call minpac#add('justinmk/vim-dirvish')
call minpac#add('jiangmiao/auto-pairs')
call minpac#add('junegunn/vim-peekaboo')
call minpac#add('junegunn/fzf')
call minpac#add('junegunn/fzf.vim')
" call minpac#add('ncm2/ncm2')
" call minpac#add('ncm2/ncm2-bufword')
" call minpac#add('mattn/emmet-vim')
call minpac#add('mike-hearn/base16-vim-lightline')
call minpac#add('mhinz/vim-startify')
call minpac#add('neoclide/coc.nvim')
" call minpac#add('roxma/nvim-yarp')
call minpac#add('tpope/vim-fugitive')
call minpac#add('tpope/vim-commentary')
call minpac#add('tpope/vim-surround')
call minpac#add('tpope/vim-repeat')
" call minpac#add('w0rp/ale')

" Commands
command! PackUpdate call minpac#update()
command! PackClean call minpac#clean()

" Basic setup
syntax on
nnoremap <Space> <Nop>
vnoremap <Space> <Nop>
let mapleader = " "
set encoding=UTF-8
set noshowmode
set splitbelow
set splitright
set number
set textwidth=80
set nohls
set noshowmatch
set noshowmode
setlocal spell spelllang=en_us
set nospell
set modeline
set nojoinspaces " pesky 2-spaces after the period thing - substack :p
set guicursor=
set rtp+=/usr/bin/fzf

" Indent Settings
set autoindent
set indentexpr=off
set expandtab
set tabstop=2
set softtabstop=2
set shiftwidth=2 

" Backup settings
set nowritebackup
set noswapfile
set nobackup

" - Finding files recursively
set path+=**

" Wild stuff and such
set wildmenu
set wildignore+=**/node_modules/**

" Mappings
nmap <silent> <leader>t :exec &rnu? "se rnu!" : "se rnu"<CR>

" Copy selected text to system clipboard (requires vim compiled with x-11)
vnoremap <C-c> "*y :let @+=@*<CR>
map <C-v> "+P

 " - easy buffer navigation
noremap <leader>n :bn<cr>
noremap <leader>p :bp<cr>
noremap <leader>d :bd<cr>

if has('nvim')
  " - avoid term buffers from closing on buf switch
  set hidden
  set termguicolors
  tnoremap <Esc> <C-\><C-n>
  tnoremap <C-v><Esc> <Esc>
  " - easy window navigation - when in term
  tnoremap <C-h> <C-\><C-n><C-w>h
  tnoremap <C-j> <C-\><C-n><C-w>j
  tnoremap <C-k> <C-\><C-n><C-w>k
  tnoremap <C-l> <C-\><C-n><C-w>l

  if executable('nvr')
    autocmd FileType gitcommit set bufhidden=delete
    let $VISUAL="nvr -cc split --remote-wait"
  endif
endif

" Resizing Windows
nnoremap <C-up> <C-W>+
nnoremap <C-down> <C-W>-
nnoremap <C-left> <C-W><
nnoremap <C-right> <C-W>>

" Plugin: COC
set shortmess+=c
inoremap <silent><expr> <TAB>
      \ pumvisible() ? "\<C-n>" :
      \ <SID>check_back_space() ? "\<TAB>" :
      \ coc#refresh()
inoremap <expr><S-TAB> pumvisible() ? "\<C-p>" : "\<C-h>"

function! s:check_back_space() abort
  let col = col('.') - 1
  return !col || getline('.')[col - 1]  =~# '\s'
endfunction

" Use <c-space> for trigger completion.
inoremap <silent><expr> <c-space> coc#refresh()

" Use <cr> for confirm completion, `<C-g>u` means break undo chain at current position.
" Coc only does snippet and additional edit on confirm.
inoremap <expr> <cr> pumvisible() ? "\<C-y>" : "\<C-g>u\<CR>"

" Use `[c` and `]c` for navigate diagnostics
nmap <silent> [c <Plug>(coc-diagnostic-prev)
nmap <silent> ]c <Plug>(coc-diagnostic-next)

" Remap keys for gotos
nmap <silent> gd <Plug>(coc-definition)
nmap <silent> gy <Plug>(coc-type-definition)
nmap <silent> gi <Plug>(coc-implementation)
nmap <silent> gr <Plug>(coc-references)

command! -nargs=0 Prettier :CocCommand prettier.formatFile

" ==================== ncm2 ======================
" ncm2 config
" autocmd BufEnter * call ncm2#enable_for_buffer()
" set completeopt=noinsert,menuone,noselect
" suppress the annoying 'match x of y', 'The only match' and 'Pattern not
" found' messages
" set shortmess+=c
" CTRL-C doesn't trigger the InsertLeave autocmd . map to <ESC> instead.
" inoremap <c-c> <ESC>

" When the <Enter> key is pressed while the popup menu is visible, it only
" hides the menu. Use this mapping to close the menu and also start a new
" line.
" inoremap <expr> <CR> (pumvisible() ? "\<c-y>\<cr>" : "\<CR>")

" Use <TAB> to select the popup menu:
" inoremap <expr> <Tab> pumvisible() ? "\<C-n>" : "\<Tab>"
" inoremap <expr> <S-Tab> pumvisible() ? "\<C-p>" : "\<S-Tab>"
" set signcolumn=no

" LanguageClient + Server setup
" let g:LanguageClient_serverCommands = {
"   \ 'javascript': ['javascript-typescript-stdio']
"   \ }

" nnoremap <silent> K :call LanguageClient#textDocument_hover()<CR>
" nnoremap <silent> gd :call LanguageClient#textDocument_definition()<CR>
" nnoremap <silent> <F2> :call LanguageClient#textDocument_rename()<CR>
" ==================================================

" fzf
let $FZF_DEFAULT_COMMAND = 'ag --hidden --ignore .git -f -g ""'
nnoremap <C-p> :FZF<Cr>
nnoremap <C-b> :Buffers<Cr>
nnoremap <C-r> :Rg<Cr>

" let g:dracula_colorterm = 0
" let g:dracula_italic = 0
" Base16 reset
function! s:base16_customize() abort
  call Base16hi("LineNr", g:base16_gui03, g:base16_gui00, g:base16_cterm03, g:base16_cterm00, "", "")
endfunction

augroup on_change_colorschema
  autocmd!
  autocmd ColorScheme * call s:base16_customize()
augroup END

colorscheme base16-material-darker 

" adhere to terminal tranparency
hi Normal guibg=NONE ctermbg=NONE

" Plugin: netrw {{{2
let g:loaded_netrwPlugin = 1
let g:dirvish_relative_paths = 0
command! -nargs=? -complete=dir Explore Dirvish <args>
command! -nargs=? -complete=dir Sexplore belowright split | silent Dirvish <args>
command! -nargs=? -complete=dir Vexplore leftabove vsplit | silent Dirvish <args>

" Plugin: GitGutter
set updatetime=1000
nmap <Leader>gs <Plug>GitGutterStageHunk
nmap <Leader>gu <Plug>GitGutterUndoHunk
" nmap <Leader>gp <Plug>GitGutterPreviewHunk
nmap <Leader>gn <Plug>GitGutterNextHunk
nmap <Leader>gb <Plug>GitGutterPrevHunk

"Plugin: Fugitive
nnoremap <Leader>gc :Gcommit<Cr>

" Plugin: Search and Replace 
nmap <Leader>s :%s/\<<C-r><C-w>\>/

" Plugin: Startify
let g:startify_custom_header =
        \ map(split(system('figlet Life is Strange'), '\n'), '"   ". v:val')

let g:startify_files_number = 10

let g:startify_lists = [
      \ { 'type': 'files',     'header': [   'Recent Files']            },
      \ { 'type': 'bookmarks', 'header': [   'Bookmarks']      },
      \ { 'type': 'commands',  'header': [   'Commands']       },
      \ ]


" Plugin: Ale
" let g:ale_lint_on_text_changed = 'never'
" let g:ale_lint_on_save = 1
" let g:ale_lint_on_enter = 0
" let g:ale_fix_on_save = 1
" let g:ale_javascript_prettier_options = '--semi --single-quote --trailing-comma es5'
" let g:ale_linters = {
"       \   'javascript': ['eslint'],
" \}

" let g:ale_fixers = {
"       \   'javascript': ['prettier'],
"       \   'css': ['prettier'],
"       \   'scss': ['prettier'],
" \}
" let g:ale_fixers = { \   'haskell': ['brittany'] \}

" Plugin: lightline {{{1
let g:lightline = {
      \ 'colorscheme': 'base16_material_darker',
      \ 'component': {
      \   'lineinfo': ' %3l:%-2v',
      \ },
      \ 'active': {
      \   'left': [ [ 'mode', 'paste' ],
      \             [ 'gitbranch', 'readonly', 'filename', 'modified' ] ],
      \   'right': [ [ 'lineinfo' ],
      \              [ 'percent' ],
      \              [ 'fileencoding', 'filetype'] ]
      \ },
      \ 'component_function': {
      \   'gitbranch': 'LightLineGitBranch'
      \ }
    \ }

function! LightLineGitBranch()
  let l:branch = fugitive#head()
  return l:branch ==# '' ? '' : ' ' . l:branch
endfunction

" FT
au BufNewFile,BufRead *.ejs set filetype=html 

augroup file-types
  autocmd!
  " Override some syntaxes so things look better
  autocmd BufNewFile,BufRead *.ts,*.snap*,*.es6,*.tsx setlocal filetype=javascript.jsx
  autocmd BufNewFile,BufRead *stylelintrc,*eslintrc,*babelrc,*jshintrc setlocal syntax=json
  autocmd BufNewFile,BufRead *.css,*.pcss setlocal syntax=scss filetype=scss

  " Allow stylesheets to autocomplete hyphenated words
  autocmd FileType css,scss,sass setlocal iskeyword+=-
augroup END

