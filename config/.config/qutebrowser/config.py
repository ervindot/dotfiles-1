# Autogenerated config.py
# Documentation:
#   qute://help/configuring.html
#   qute://help/settings.html

# Uncomment this to still load settings configured via autoconfig.yml
# config.load_autoconfig()

# Aliases for commands. The keys of the given dictionary are the
# aliases, while the values are the commands they map to.
# Type: Dict
c.aliases = {'q': 'quit', 'w': 'session-save', 'wq': 'quit --save'}

# Require a confirmation before quitting the application.
# Type: ConfirmQuit
# Valid values:
#   - always: Always show a confirmation.
#   - multiple-tabs: Show a confirmation if multiple tabs are opened.
#   - downloads: Show a confirmation if downloads are running
#   - never: Never show a confirmation.
c.confirm_quit = ['never']

# Maximum time (in minutes) between two history items for them to be
# considered being from the same browsing session. Items with less time
# between them are grouped when being displayed in `:history`. Use -1 to
# disable separation.
# Type: Int
c.history_gap_interval = 30

# When to find text on a page case-insensitively.
# Type: IgnoreCase
# Valid values:
#   - always: Search case-insensitively.
#   - never: Search case-sensitively.
#   - smart: Search case-sensitively if there are capital characters.
c.search.ignore_case = 'smart'

# Find text on a page incrementally, renewing the search for each typed
# character.
# Type: Bool
c.search.incremental = True

# Enable host blocking.
# Type: Bool
c.content.host_blocking.enabled = False

# List of URLs of lists which contain hosts to block.  The file can be
# in one of the following formats:  - An `/etc/hosts`-like file - One
# host per line - A zip-file of any of the above, with either only one
# file, or a file   named `hosts` (with any extension).  It's also
# possible to add a local file or directory via a `file://` URL. In case
# of a directory, all files in the directory are read as adblock lists.
# The file `~/.config/qutebrowser/blocked-hosts` is always read if it
# exists.
# Type: List of Url
c.content.host_blocking.lists = ['https://www.malwaredomainlist.com/hostslist/hosts.txt', 'http://someonewhocares.org/hosts/hosts', 'http://winhelp2002.mvps.org/hosts.zip', 'http://malwaredomains.lehigh.edu/files/justdomains.zip', 'https://pgl.yoyo.org/adservers/serverlist.php?hostformat=hosts&mimetype=plaintext']

# A list of patterns that should always be loaded, despite being ad-
# blocked. Note this whitelists blocked hosts, not first-party URLs. As
# an example, if `example.org` loads an ad from `ads.example.org`, the
# whitelisted host should be `ads.example.org`. If you want to disable
# the adblocker on a given page, use the `content.host_blocking.enabled`
# setting with a URL pattern instead. Local domains are always exempt
# from hostblocking.
# Type: List of UrlPattern
c.content.host_blocking.whitelist = ['piwik.org']

# Enable hyperlink auditing (`<a ping>`).
# Type: Bool
c.content.hyperlink_auditing = False

# Load images automatically in web pages.
# Type: Bool
c.content.images = True

# Show javascript alerts.
# Type: Bool
c.content.javascript.alert = True

# Enable JavaScript.
# Type: Bool
config.set('content.javascript.enabled', True, 'file://*')

# Enable JavaScript.
# Type: Bool
config.set('content.javascript.enabled', True, 'chrome://*/*')

# Enable JavaScript.
# Type: Bool
config.set('content.javascript.enabled', True, 'qute://*/*')

# List of user stylesheet filenames to use.
# Type: List of File, or File
c.content.user_stylesheets = '~/.config/qutebrowser/dracula-all-sites.css'

# Enable WebGL.
# Type: Bool
c.content.webgl = True

# Height (in pixels or as percentage of the window) of the completion.
# Type: PercOrInt
c.completion.height = '32%'

# Move on to the next part when there's only one possible completion
# left.
# Type: Bool
c.completion.quick = True

# When to show the autocompletion window.
# Type: String
# Valid values:
#   - always: Whenever a completion is available.
#   - auto: Whenever a completion is requested.
#   - never: Never.
c.completion.show = 'always'

# Shrink the completion to be smaller than the configured size if there
# are no scrollbars.
# Type: Bool
c.completion.shrink = False

# Width (in pixels) of the scrollbar in the completion window.
# Type: Int
c.completion.scrollbar.width = 12

# Padding (in pixels) of the scrollbar handle in the completion window.
# Type: Int
c.completion.scrollbar.padding = 2

# Format of timestamps (e.g. for the history completion).
# Type: TimestampTemplate
c.completion.timestamp_format = '%Y-%m-%d'

# Number of URLs to show in the web history. 0: no history / -1:
# unlimited
# Type: Int
c.completion.web_history.max_items = -1

# Delay (in milliseconds) before updating completions after typing a
# character.
# Type: Int
c.completion.delay = 0

# Editor (and arguments) to use for the `open-editor` command. The
# following placeholders are defined: * `{file}`: Filename of the file
# to be edited. * `{line}`: Line in which the caret is found in the
# text. * `{column}`: Column in which the caret is found in the text. *
# `{line0}`: Same as `{line}`, but starting from index 0. * `{column0}`:
# Same as `{column}`, but starting from index 0.
# Type: ShellCommand
c.editor.command = ['vim', '-f', '{file}', '-c', 'normal {line}G{column0}l']

# Languages to use for spell checking. You can check for available
# languages and install dictionaries using scripts/dictcli.py. Run the
# script with -h/--help for instructions.
# Type: List of String
# Valid values:
#   - af-ZA: Afrikaans (South Africa)
#   - bg-BG: Bulgarian (Bulgaria)
#   - ca-ES: Catalan (Spain)
#   - cs-CZ: Czech (Czech Republic)
#   - da-DK: Danish (Denmark)
#   - de-DE: German (Germany)
#   - el-GR: Greek (Greece)
#   - en-AU: English (Australia)
#   - en-CA: English (Canada)
#   - en-GB: English (United Kingdom)
#   - en-US: English (United States)
#   - es-ES: Spanish (Spain)
#   - et-EE: Estonian (Estonia)
#   - fa-IR: Farsi (Iran)
#   - fo-FO: Faroese (Faroe Islands)
#   - fr-FR: French (France)
#   - he-IL: Hebrew (Israel)
#   - hi-IN: Hindi (India)
#   - hr-HR: Croatian (Croatia)
#   - hu-HU: Hungarian (Hungary)
#   - id-ID: Indonesian (Indonesia)
#   - it-IT: Italian (Italy)
#   - ko: Korean
#   - lt-LT: Lithuanian (Lithuania)
#   - lv-LV: Latvian (Latvia)
#   - nb-NO: Norwegian (Norway)
#   - nl-NL: Dutch (Netherlands)
#   - pl-PL: Polish (Poland)
#   - pt-BR: Portuguese (Brazil)
#   - pt-PT: Portuguese (Portugal)
#   - ro-RO: Romanian (Romania)
#   - ru-RU: Russian (Russia)
#   - sh: Serbo-Croatian
#   - sk-SK: Slovak (Slovakia)
#   - sl-SI: Slovenian (Slovenia)
#   - sq: Albanian
#   - sr: Serbian
#   - sv-SE: Swedish (Sweden)
#   - ta-IN: Tamil (India)
#   - tg-TG: Tajik (Tajikistan)
#   - tr-TR: Turkish (Turkey)
#   - uk-UA: Ukrainian (Ukraine)
#   - vi-VN: Vietnamese (Viet Nam)
c.spellcheck.languages = ['en-US']

# Hide the statusbar unless a message is shown.
# Type: Bool
c.statusbar.hide = False

# Padding (in pixels) for the statusbar.
# Type: Padding
c.statusbar.padding = {'top': 1, 'bottom': 1, 'left': 0, 'right': 0}

# Position of the status bar.
# Type: VerticalPosition
# Valid values:
#   - top
#   - bottom
c.statusbar.position = 'bottom'

# List of widgets displayed in the statusbar.
# Type: List of String
# Valid values:
#   - url: Current page URL.
#   - scroll: Percentage of the current page position like `10%`.
#   - scroll_raw: Raw percentage of the current page position like `10`.
#   - history: Display an arrow when possible to go back/forward in history.
#   - tabs: Current active tab, e.g. `2`.
#   - keypress: Display pressed keys when composing a vi command.
#   - progress: Progress bar for the current page loading.
c.statusbar.widgets = ['url', 'scroll', 'progress']

# Open new tabs (middleclick/ctrl+click) in the background.
# Type: Bool
c.tabs.background = False

# Scaling factor for favicons in the tab bar. The tab size is unchanged,
# so big favicons also require extra `tabs.padding`.
# Type: Float
c.tabs.favicons.scale = 1.1

# When to show favicons in the tab bar.
# Type: String
# Valid values:
#   - always: Always show favicons.
#   - never: Always hide favicons.
#   - pinned: Show favicons only on pinned tabs.
c.tabs.favicons.show = 'always'

# Padding (in pixels) around text for tabs.
# Type: Padding
c.tabs.padding = {'top': 3, 'bottom': 3, 'left': 5, 'right': 5}

# When switching tabs, what input mode is applied.
# Type: String
# Valid values:
#   - persist: Retain the current mode.
#   - restore: Restore previously saved mode.
#   - normal: Always revert to normal mode.
c.tabs.mode_on_change = 'normal'

# Position of the tab bar.
# Type: Position
# Valid values:
#   - top
#   - bottom
#   - left
#   - right
c.tabs.position = 'top'

# Which tab to select when the focused tab is removed.
# Type: SelectOnRemove
# Valid values:
#   - prev: Select the tab which came before the closed one (left in horizontal, above in vertical).
#   - next: Select the tab which came after the closed one (right in horizontal, below in vertical).
#   - last-used: Select the previously selected tab.
c.tabs.select_on_remove = 'next'

# When to show the tab bar.
# Type: String
# Valid values:
#   - always: Always show the tab bar.
#   - never: Always hide the tab bar.
#   - multiple: Hide the tab bar if only one tab is open.
#   - switching: Show the tab bar when switching tabs.
c.tabs.show = 'multiple'

# Duration (in milliseconds) to show the tab bar before hiding it when
# tabs.show is set to 'switching'.
# Type: Int
c.tabs.show_switching_delay = 800

# Alignment of the text inside of tabs.
# Type: TextAlignment
# Valid values:
#   - left
#   - right
#   - center
c.tabs.title.alignment = 'center'

# Format to use for the tab title. The following placeholders are
# defined:  * `{perc}`: Percentage as a string like `[10%]`. *
# `{perc_raw}`: Raw percentage, e.g. `10`. * `{title}`: Title of the
# current web page. * `{title_sep}`: The string ` - ` if a title is set,
# empty otherwise. * `{index}`: Index of this tab. * `{id}`: Internal
# tab ID of this tab. * `{scroll_pos}`: Page scroll position. *
# `{host}`: Host of the current web page. * `{backend}`: Either
# ''webkit'' or ''webengine'' * `{private}`: Indicates when private mode
# is enabled. * `{current_url}`: URL of the current web page. *
# `{protocol}`: Protocol (http/https/...) of the current web page. *
# `{audio}`: Indicator for audio/mute status.
# Type: FormatString
c.tabs.title.format = '{index}: ({protocol}) {title}'

# Format to use for the tab title for pinned tabs. The same placeholders
# like for `tabs.title.format` are defined.
# Type: FormatString
c.tabs.title.format_pinned = '{index}'

# Width (in pixels or as percentage of the window) of the tab bar if
# it's vertical.
# Type: PercOrInt
c.tabs.width = '20%'

# Width (in pixels) of the progress indicator (0 to disable).
# Type: Int
c.tabs.indicator.width = 0

# Padding (in pixels) for tab indicators.
# Type: Padding
c.tabs.indicator.padding = {'top': 2, 'bottom': 2, 'left': 0, 'right': 4}

# Search engines which can be used via the address bar. Maps a search
# engine name (such as `DEFAULT`, or `ddg`) to a URL with a `{}`
# placeholder. The placeholder will be replaced by the search term, use
# `{{` and `}}` for literal `{`/`}` signs. The search engine named
# `DEFAULT` is used when `url.auto_search` is turned on and something
# else than a URL was entered to be opened. Other search engines can be
# used by prepending the search engine name to the search term, e.g.
# `:open google qutebrowser`.
# Type: Dict
c.url.searchengines = {'DEFAULT': 'https://duckduckgo.com/?q={}', 'aw': 'https://wiki.archlinux.org/index.php?title=Special%3ASearch&search={}', 'g': 'https://google.com/search?hl=en&q={}', 'm': 'https://mdn.io/{}', 'r': 'https://old.reddit.com/r/{}', 'yt': 'https://www.youtube.com/results?search_query={}', 'fn': 'https://www.funimation.com/search/?q={}'}

# Page(s) to open at the start.
# Type: List of FuzzyUrl, or FuzzyUrl
c.url.start_pages = 'https://start.duckduckgo.com'

# URL parameters to strip with `:yank url`.
# Type: List of String
c.url.yank_ignored_parameters = ['ref', 'utm_source', 'utm_medium', 'utm_campaign', 'utm_term', 'utm_content']

# Hide the window decoration.  This setting requires a restart on
# Wayland.
# Type: Bool
c.window.hide_decoration = False

# Format to use for the window title. The same placeholders like for
# `tabs.title.format` are defined.
# Type: FormatString
c.window.title_format = '{perc}{title}{title_sep}qutebrowser'

# Text color of the completion widget. May be a single color to use for
# all columns or a list of three colors, one for each column.
# Type: List of QtColor, or QtColor
c.colors.completion.fg = '#C7CCD1'

# Background color of the completion widget for odd rows.
# Type: QssColor
c.colors.completion.odd.bg = '#747C84'

# Background color of the completion widget for even rows.
# Type: QssColor
c.colors.completion.even.bg = '#1C2023'

# Foreground color of completion widget category headers.
# Type: QtColor
c.colors.completion.category.fg = '#AEC795'

# Background color of the completion widget category headers.
# Type: QssColor
c.colors.completion.category.bg = '#1C2023'

# Top border color of the completion widget category headers.
# Type: QssColor
c.colors.completion.category.border.top = '#1C2023'

# Bottom border color of the completion widget category headers.
# Type: QssColor
c.colors.completion.category.border.bottom = '#1C2023'

# Foreground color of the selected completion item.
# Type: QtColor
c.colors.completion.item.selected.fg = '#393F45'

# Background color of the selected completion item.
# Type: QssColor
c.colors.completion.item.selected.bg = '#AEC795'

# Top border color of the completion widget category headers.
# Type: QssColor
c.colors.completion.item.selected.border.top = '#AEC795'

# Bottom border color of the selected completion item.
# Type: QssColor
c.colors.completion.item.selected.border.bottom = '#AEC795'

# Foreground color of the matched text in the completion.
# Type: QtColor
c.colors.completion.match.fg = '#95C7AE'

# Color of the scrollbar handle in the completion view.
# Type: QssColor
c.colors.completion.scrollbar.fg = '#C7CCD1'

# Color of the scrollbar in the completion view.
# Type: QssColor
c.colors.completion.scrollbar.bg = '#1C2023'

# Background color for the download bar.
# Type: QssColor
c.colors.downloads.bar.bg = '#1C2023'

# Color gradient start for download text.
# Type: QtColor
c.colors.downloads.start.fg = '#1C2023'

# Color gradient start for download backgrounds.
# Type: QtColor
c.colors.downloads.start.bg = '#AE95C7'

# Color gradient end for download text.
# Type: QtColor
c.colors.downloads.stop.fg = '#1C2023'

# Color gradient stop for download backgrounds.
# Type: QtColor
c.colors.downloads.stop.bg = '#95AEC7'

# Foreground color for downloads with errors.
# Type: QtColor
c.colors.downloads.error.fg = '#C7AE95'

# Font color for hints.
# Type: QssColor
c.colors.hints.fg = '#1C2023'

# Background color for hints. Note that you can use a `rgba(...)` value
# for transparency.
# Type: QssColor
c.colors.hints.bg = '#AEC795'

# Font color for the matched part of hints.
# Type: QssColor
c.colors.hints.match.fg = '#C7CCD1'

# Text color for the keyhint widget.
# Type: QssColor
c.colors.keyhint.fg = '#C7CCD1'

# Highlight color for keys to complete the current keychain.
# Type: QssColor
c.colors.keyhint.suffix.fg = '#C7CCD1'

# Background color of the keyhint widget.
# Type: QssColor
c.colors.keyhint.bg = '#1C2023'

# Foreground color of an error message.
# Type: QssColor
c.colors.messages.error.fg = '#1C2023'

# Background color of an error message.
# Type: QssColor
c.colors.messages.error.bg = '#C7AE95'

# Border color of an error message.
# Type: QssColor
c.colors.messages.error.border = '#C7AE95'

# Foreground color of a warning message.
# Type: QssColor
c.colors.messages.warning.fg = '#1C2023'

# Background color of a warning message.
# Type: QssColor
c.colors.messages.warning.bg = '#C795AE'

# Border color of a warning message.
# Type: QssColor
c.colors.messages.warning.border = '#C795AE'

# Foreground color of an info message.
# Type: QssColor
c.colors.messages.info.fg = '#C7CCD1'

# Background color of an info message.
# Type: QssColor
c.colors.messages.info.bg = '#1C2023'

# Border color of an info message.
# Type: QssColor
c.colors.messages.info.border = '#1C2023'

# Foreground color for prompts.
# Type: QssColor
c.colors.prompts.fg = '#C7CCD1'

# Border used around UI elements in prompts.
# Type: String
c.colors.prompts.border = '#1C2023'

# Background color for prompts.
# Type: QssColor
c.colors.prompts.bg = '#1C2023'

# Background color for the selected item in filename prompts.
# Type: QssColor
c.colors.prompts.selected.bg = '#AEC795'

# Foreground color of the statusbar.
# Type: QssColor
c.colors.statusbar.normal.fg = '#95C7AE'

# Background color of the statusbar.
# Type: QssColor
c.colors.statusbar.normal.bg = '#1C2023'

# Foreground color of the statusbar in insert mode.
# Type: QssColor
c.colors.statusbar.insert.fg = '#1C2023'

# Background color of the statusbar in insert mode.
# Type: QssColor
c.colors.statusbar.insert.bg = '#AE95C7'

# Foreground color of the statusbar in passthrough mode.
# Type: QssColor
c.colors.statusbar.passthrough.fg = '#1C2023'

# Background color of the statusbar in passthrough mode.
# Type: QssColor
c.colors.statusbar.passthrough.bg = '#95AEC7'

# Foreground color of the statusbar in private browsing mode.
# Type: QssColor
c.colors.statusbar.private.fg = '#1C2023'

# Background color of the statusbar in private browsing mode.
# Type: QssColor
c.colors.statusbar.private.bg = '#747C84'

# Foreground color of the statusbar in command mode.
# Type: QssColor
c.colors.statusbar.command.fg = '#C7CCD1'

# Background color of the statusbar in command mode.
# Type: QssColor
c.colors.statusbar.command.bg = '#1C2023'

# Foreground color of the statusbar in private browsing + command mode.
# Type: QssColor
c.colors.statusbar.command.private.fg = '#C7CCD1'

# Background color of the statusbar in private browsing + command mode.
# Type: QssColor
c.colors.statusbar.command.private.bg = '#1C2023'

# Foreground color of the statusbar in caret mode.
# Type: QssColor
c.colors.statusbar.caret.fg = '#1C2023'

# Background color of the statusbar in caret mode.
# Type: QssColor
c.colors.statusbar.caret.bg = '#C795AE'

# Foreground color of the statusbar in caret mode with a selection.
# Type: QssColor
c.colors.statusbar.caret.selection.fg = '#1C2023'

# Background color of the statusbar in caret mode with a selection.
# Type: QssColor
c.colors.statusbar.caret.selection.bg = '#AE95C7'

# Background color of the progress bar.
# Type: QssColor
c.colors.statusbar.progress.bg = '#AE95C7'

# Default foreground color of the URL in the statusbar.
# Type: QssColor
c.colors.statusbar.url.fg = '#C7CCD1'

# Foreground color of the URL in the statusbar on error.
# Type: QssColor
c.colors.statusbar.url.error.fg = '#C7AE95'

# Foreground color of the URL in the statusbar for hovered links.
# Type: QssColor
c.colors.statusbar.url.hover.fg = '#C7CCD1'

# Foreground color of the URL in the statusbar on successful load
# (http).
# Type: QssColor
c.colors.statusbar.url.success.http.fg = '#95AEC7'

# Foreground color of the URL in the statusbar on successful load
# (https).
# Type: QssColor
c.colors.statusbar.url.success.https.fg = '#95C7AE'

# Foreground color of the URL in the statusbar when there's a warning.
# Type: QssColor
c.colors.statusbar.url.warn.fg = '#C795AE'

# Background color of the tab bar.
# Type: QtColor
c.colors.tabs.bar.bg = '#1C2023'

# Color gradient start for the tab indicator.
# Type: QtColor
c.colors.tabs.indicator.start = '#AE95C7'

# Color gradient end for the tab indicator.
# Type: QtColor
c.colors.tabs.indicator.stop = '#95AEC7'

# Color for the tab indicator on errors.
# Type: QtColor
c.colors.tabs.indicator.error = '#C7AE95'

# Foreground color of unselected odd tabs.
# Type: QtColor
c.colors.tabs.odd.fg = '#C7CCD1'

# Background color of unselected odd tabs.
# Type: QtColor
c.colors.tabs.odd.bg = '#747C84'

# Foreground color of unselected even tabs.
# Type: QtColor
c.colors.tabs.even.fg = '#C7CCD1'

# Background color of unselected even tabs.
# Type: QtColor
c.colors.tabs.even.bg = '#1C2023'

# Foreground color of selected odd tabs.
# Type: QtColor
c.colors.tabs.selected.odd.fg = '#1C2023'

# Background color of selected odd tabs.
# Type: QtColor
c.colors.tabs.selected.odd.bg = '#C7CCD1'

# Foreground color of selected even tabs.
# Type: QtColor
c.colors.tabs.selected.even.fg = '#1C2023'

# Background color of selected even tabs.
# Type: QtColor
c.colors.tabs.selected.even.bg = '#C7CCD1'

# Background color for webpages if unset (or empty to use the theme's
# color).
# Type: QtColor
c.colors.webpage.bg = 'white'

# Default monospace fonts. Whenever "monospace" is used in a font
# setting, it's replaced with the fonts listed here.
# Type: Font
c.fonts.monospace = '"Tamzen", "DejaVu Sans Mono"'

# Font used in the completion widget.
# Type: Font
c.fonts.completion.entry = '10pt DejaVu Sans'

# Font used in the completion categories.
# Type: Font
c.fonts.completion.category = '10pt DejaVu Sans'

# Font used for the debugging console.
# Type: QtFont
c.fonts.debug_console = '10pt tewi'

# Font used for the downloadbar.
# Type: Font
c.fonts.downloads = '10pt DejaVu Sans'

# Font used for the hints.
# Type: Font
c.fonts.hints = 'bold 10pt tewi'

# Font used in the keyhint widget.
# Type: Font
c.fonts.keyhint = '10pt tewi'

# Font used for error messages.
# Type: Font
c.fonts.messages.error = '10pt tewi'

# Font used for info messages.
# Type: Font
c.fonts.messages.info = '10pt DejaVu Sans'

# Font used for warning messages.
# Type: Font
c.fonts.messages.warning = '10pt DejaVu Sans'

# Font used for prompts.
# Type: Font
c.fonts.prompts = '10pt DejaVu Sans'

# Font used in the statusbar.
# Type: Font
c.fonts.statusbar = '10pt DejaVu Sans'

# Font used in the tab bar.
# Type: QtFont
c.fonts.tabs = '10pt DejaVu Sans'

# Font family for standard fonts.
# Type: FontFamily
c.fonts.web.family.standard = None

# Font family for fixed fonts.
# Type: FontFamily
c.fonts.web.family.fixed = None

# Font family for serif fonts.
# Type: FontFamily
c.fonts.web.family.serif = None

# Font family for sans-serif fonts.
# Type: FontFamily
c.fonts.web.family.sans_serif = 'DejaVu Sans'

# Font family for cursive fonts.
# Type: FontFamily
c.fonts.web.family.cursive = None

# Font family for fantasy fonts.
# Type: FontFamily
c.fonts.web.family.fantasy = None

# Default font size (in pixels) for regular text.
# Type: Int
c.fonts.web.size.default = 16

# Bindings for normal mode
config.bind(',n', 'config-cycle content.user_stylesheets ~/.config/qutebrowser/dracula-all-sites.css ""')
config.bind(',s', 'config-cycle statusbar.hide')
config.bind('<Ctrl+w>', None)
config.bind('M', 'hint links spawn mpv --geometry=50%+10+10 {hint-url}')

# Bindings for insert mode
config.bind('<Ctrl+a>', 'fake-key <Home>', mode='insert')
config.bind('<Ctrl+e>', 'fake-key <End>', mode='insert')
config.bind('<Ctrl+k>', 'fake-key <Shift-End> ;; fake-key <Delete>', mode='insert')
config.bind('<Ctrl+u>', 'fake-key <Shift+Home> ;; fake-key <Delete>', mode='insert')
config.bind('<Ctrl+w>', 'fake-key <Ctrl-backspace>', mode='insert')
